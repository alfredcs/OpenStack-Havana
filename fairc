#
# Copyright 2014 Alfred Shen
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
function usage() {
cat <<EOF
usage: $0 options

This script will create logic volume sbased on predefined templates.

Example:
	lvm.bash -D -g vg100 -d "/dev/sdb /dev/sdc /dev/sde" -n 5 -L 5G -t ext3 -p "lvm2 lvm2-libs createrepo" -m test 

OPTIONS:
  -h --help Show this message
  -v --verbose Verbose output
  -V --version Output the version of this script
  -k --Private key file for remote ssh login without a password
  -g --Volume group name. Default is "vg00" 
  -H --Remote hostname or IP to run the script. Default is "localhost"
  -n --Number of the logical volumes to be created. Default is 3
  -m --Mount point names. Default is "ora"
  -L --Log volume size for database log. Default is 2% if volume name "ora" or "database" is used
  -d --Physical devies names. Default is "/dev/sdb /dev/sdc"
  -t --File system typw. Default is "ext4"
  -p --Install additional packages. Default are "lvm2 and lvm2-libs"
  -D --Denug on/off flag. Default is "off"

EOF
}

function display_version() {
cat <<EOF
$0 (version: $VERSION)
EOF
}

function randpass() {
  [ "$2" == "0" ] && CHAR="[:alnum:]" || CHAR="[:graph:]"
    cat /dev/urandom | tr -cd "$CHAR" | head -c ${1:-32}
    echo
}

function verify_package_exists() {
  if [[ -z $VERBOSE ]]; then
      rpm -q $1 --quiet
  else
      rpm -q $1
  fi
  return $?
}

function log_info
{
    ((__log_level < __log_level_info)) || __log_dummy "INFO" "$*"
}

# A note message is usually a key log entry indicates significant progress,
# cleare last error to avoid confusing error message in unmatched steps
#
function log_note
{
    __log_last_error=""
    ((__log_level < __log_level_info)) || __log_dummy "NOTE" "$(date '+%F %T %z') $*"
}

function log_warn
{
    ((__log_level < __log_level_info)) || __log_dummy "WARN" "$(date '+%F %T %z') $*"
}

function log_error
{
    __log_last_error="$*"
    ((__log_level < __log_level_quiet)) || __log_dummy "ERROR" "$(date '+%F %T') Line:$*"
}

# Return the last message passed to log_error(), this is useful when upper
# caller wants to fetch the message to send an email report
#
function log_last_error
{
    echo "$__log_last_error"
}

function log_delimit
{
    local d=$(printf "%72s" "")
    log_info "${d// /-}"
}

function __log_dummy
{
    printf "%-5s " "${1?}" >&2
    shift
echo -e "$*" >&2
}

function roll_back () {
	[ ! $1 || ! $2 ] && { echo "Usage: $0 <vg_name> <mount_point>"; exit 1; }
	cat /etc/fstab| grep $1|grep -v ^#|grep . |awk '{print $2}'|while read aa
	do
		echo umount $aa
		[ $? -nq 0 ] && { log_error $LINENO " Roallback failure on umount -all"; exit 1; }
	done 
	echo sed -i '/$1/d' /etc/fstab
	echo /sbin/vgremove --force $1
	[ $? -nq 0 ] && { log_error $LINENO " Roallback failure on /sbin/vgremove --force $1"; exit 1; }
	exit 1
}
