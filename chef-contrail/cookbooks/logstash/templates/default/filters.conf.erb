filter {
    grok {
        patterns_dir => "/etc/logstash/patterns"
        type => "glance"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{NUMBER:response}%{SPACE} %{AUDITLOGLEVEL:level} \[%{PROG:program}\] %{GREEDYDATA:message}"
    }
    grok {
        patterns_dir => "/etc/logstash/patterns"
        type => "keystone"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} \[%{PROG:program}\]: %{GREEDYDATA:message}"
    }
    grok {
        patterns_dir => "/etc/logstash/patterns"
        type => "nova"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{AUDITLOGLEVEL:level} %{PROG:program} %{GREEDYDATA:message}"
    }
    grok {
        patterns_dir => "/etc/logstash/patterns"
        type => "cinder"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{AUDITLOGLEVEL:level} %{PROG:program} %{GREEDYDATA:message}"
    }
    grok {
        patterns_dir => "/etc/logstash/patterns"
        type => "quantum"
        pattern => "%{TIMESTAMP_ISO8601:timestamp} %{SPACE} %{LOGLEVEL:level} \[%{PROG:program}\] %{GREEDYDATA:message}"
    }
    grok {
        patterns_dir => "/etc/logstash/patterns"
        type => "apache-access"
        pattern => "%{COMBINEDAPACHELOG}"
    }
    grok {
        patterns_dir => "/etc/logstash/patterns"
        type => "apache-error"
        pattern => "\[%{APACHE_DATETIME_ERROR:timestamp}\] \[%{APACHE_LOG_LEVEL:level}\] %{GREEDYDATA:message}"
    }
    grok {
        patterns_dir => "/etc/logstash/patterns"
        type => "rabbitmq"
        pattern => "=%{LOGLEVEL:level} REPORT==== %{RABBITMQ_DATE:timestamp} ==="
    }
    grok {
        patterns_dir => "/etc/logstash/patterns"
        type => "libvirt"
        pattern => "%{TIMESTAMP_ISO8601:timestamp}: %{NUMBER:code}: %{LOGLEVEL:level} : %{GREEDYDATA:message}"
    }
    multiline {
        type => "glance"
        pattern => "^(([0-9]+-(?:0?[1-9]|1[0-2])-(?:3[01]|[1-2]?[0-9]|0?[1-9]))|((?:0?[1-9]|1[0-2])/(?:3[01]|[1-2]?[0-9]|0?[1-9]))).*$"
        negate => true
        what => "previous"
    }
    multiline {
        type => "keystone"
        pattern => "^(([0-9]+-(?:0?[1-9]|1[0-2])-(?:3[01]|[1-2]?[0-9]|0?[1-9]))|((?:0?[1-9]|1[0-2])/(?:3[01]|[1-2]?[0-9]|0?[1-9]))).*$"
        negate => true
        what => "previous"
    }
    multiline {
        type => "nova"
        pattern => "^(([0-9]+-(?:0?[1-9]|1[0-2])-(?:3[01]|[1-2]?[0-9]|0?[1-9]))|((?:0?[1-9]|1[0-2])/(?:3[01]|[1-2]?[0-9]|0?[1-9]))).*$"
        negate => true
        what => "previous"
    }
    multiline {
        type => "rabbitmq"
        pattern => "^="
        negate => true
        what => "previous"
    }
}
