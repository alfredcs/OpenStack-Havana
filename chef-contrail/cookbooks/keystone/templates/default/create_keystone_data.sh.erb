#!/bin/bash
#
# Initial data for Keystone using python-keystoneclient
#
# Tenant               User      Roles
# ------------------------------------------------------------------
# admin                admin     admin
# service              glance    admin
# service              nova      admin,ResellerAdmin
# service              swift     admin
#
# additional role : Member, to be used in swift for the tenant:user
#

protocol=<%= node['openstack_config']['services']['keystone']['endpoint']['internal']['protocol'] %>
ip=<%= OCS.app_ip(node) %>
port=<%= node['openstack_config']['services']['keystone']['endpoint']['internal']['admin_port'] %>
path='v2.0/'

ADMIN_PASSWORD=<%= node['openstack_config']['services']['keystone']['user']['admin']['password'] %>
SERVICE_PASSWORD=<%= node['openstack_config']['services']['keystone']['user']['admin']['password'] %>
export SERVICE_TOKEN=<%= node['keystone']['admin_token'] %>
export SERVICE_ENDPOINT="$protocol://$ip:$port/$path"
SERVICE_TENANT_NAME=<%= node['openstack_config']['services']['keystone']['user']['admin']['tenant'] %>

# test that the endpoint is up
test_server=`curl -f -s -I ${SERVICE_ENDPOINT}`
server_ok=$?
if [ $server_ok -ne 0 ]; then
    echo "Keystone server connection test failed";
    exit 1
fi


get_id () {
    echo `$@ | awk '/ id / { print $4 }'`
}

# check if there is already something in the DB, If yes exit
ADMIN_USER_present=`keystone user-list | grep admin | wc -l`
if [ 0 -ne $ADMIN_USER_present ]; then
    exit 0
fi

# Tenants
ADMIN_TENANT=$(get_id keystone tenant-create --name=admin)
SERVICE_TENANT=$(get_id keystone tenant-create --name=$SERVICE_TENANT_NAME)

# Users
ADMIN_USER=$(get_id keystone user-create --name=admin \
                                         --pass="$ADMIN_PASSWORD")

# Roles
ADMIN_ROLE=$(get_id keystone role-create --name=admin)
KEYSTONEADMIN_ROLE=$(get_id keystone role-create --name=KeystoneAdmin)
KEYSTONESERVICE_ROLE=$(get_id keystone role-create --name=KeystoneServiceAdmin)

# Add Roles to Users in Tenants
keystone user-role-add --user_id $ADMIN_USER --role_id $ADMIN_ROLE --tenant_id $ADMIN_TENANT

# TODO(termie): these two might be dubious
keystone user-role-add --user_id $ADMIN_USER --role_id $KEYSTONEADMIN_ROLE --tenant_id $ADMIN_TENANT
keystone user-role-add --user_id $ADMIN_USER --role_id $KEYSTONESERVICE_ROLE --tenant_id $ADMIN_TENANT


# The Member role is used by Horizon and Swift so we need to keep it:
MEMBER_ROLE=$(get_id keystone role-create --name=Member)

# Configure service users/roles
<%- node["openstack_config"]["services"].to_hash.keys.each do |service| %>
KEY_USER=$(get_id keystone user-create --name=<%= service %> \
                --pass="<%= node["openstack_config"]["services"][service]["keystone_service_password"] %>" \
                --tenant_id $SERVICE_TENANT)
keystone user-role-add --tenant_id $SERVICE_TENANT \
                       --user_id $KEY_USER \
                       --role_id $ADMIN_ROLE

<%- if service == 'nova' %>
# Nova needs ResellerAdmin role to download images when accessing
# swift through the s3 api. The admin role in swift allows a user
# to act as an admin for their tenant, but ResellerAdmin is needed
# for a user to act as any tenant. The name of this role is also
# configurable in swift-proxy.conf
RESELLER_ROLE=$(get_id keystone role-create --name=ResellerAdmin)
keystone user-role-add --tenant_id $SERVICE_TENANT \
                       --user_id $NOVA_USER \
                       --role_id $RESELLER_ROLE

<%- end %>
<%- end %>
