#!/bin/bash -ex
source $(dirname $0)/.lib/unit_tests
source $(dirname $0)/.lib/substratum
source $(dirname $0)/.lib/sheep

MACHINE=z4

#
# Utility functions
#

function check_authkeys_exists {
    luser=$1
    $MACHINE.ssh sudo test -f /home/$luser/.ssh/authorized_keys
    return $?
}

#
# Initialization
#
new deployment is substratum:deployment <<EOF
{
  "name":"example",
  "roles":["users"],
  "traits": {
    "openssh": {
      "ListenInterface": [ "eth0", "eth2", "eth3" ],
      "Port": "22"
    },
    "rssh-agent": {
      "private_key": "SSH PRIVATE KEY HERE"
    },
    "users": {
      "table": {
        "cloudscaling": { "sudo_access": true },
        "jdoe": {
          "comment": "John Doe",
          "shell": "/bin/bash",
          "ssh-keys": [
            "ssh-rsa DEADBEEF"
          ]
        }
      }
    }
  }
}
EOF

new $MACHINE is sheep:machine $MACHINE

echo "Assigning $MACHINE to deployment." >&2
$MACHINE.update_deployments $(deployment.uuid)

echo "Launching VM.">&2
status=$($MACHINE.launch)
if [[ "$status" =~ 'already running' ]]; then
    $MACHINE.ssh sudo chef-solo
fi
$MACHINE.wait

set +e
$MACHINE.ssh cat/var/log/firstboot.log >&2
[ $? -ne 0 ] &&
    SSH_PORT=22 $MACHINE.ssh cat/var/log/firstboot.log 2>&1
set -e

function test_cloudscaling_authkey {
    check_authkeys_exists cloudscaling
}

function test_nested_bash {
$MACHINE.ssh bash <<EOF
    exit 0
EOF
}

function test_bin_true {
    $MACHINE.ssh /bin/true
}
