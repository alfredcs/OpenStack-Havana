# Generated by chef
# Nova key dump:
[DEFAULT]
verbose=<%= node['openstack_config']['service']['nova']['verbose'] %>
debug=<%= node['openstack_config']['service']['nova']['debug'] %>
use_syslog=false

#auth strategy (noauth, keystone, depreciated)
api_paste_config=/etc/nova/api-paste.ini
auth_strategy=keystone
keystone_ec2_url=<%= OCS.keystone_internal_endpoint(node, path="/v2.0/ec2tokens") %>

# Require cinder storage
cinder_catalog_info="volume:cinder:internalURL"
volume_api_class=nova.volume.cinder.API
libvirt_volume_drivers=iscsi=nova.virt.libvirt.volume.LibvirtISCSIVolumeDriver

# api rate limiting
api_rate_limit = <%= node['nova']['api_rate_limit'] %>

# API workers
ec2_workers = <%= node['nova']['api_workers'] %>
osapi_compute_workers = <%= node['nova']['api_workers'] %>
metadata_workers = <%= node['nova']['api_workers'] %>

# enabled apis
enabled_apis=ec2,osapi_compute,metadata

rootwrap_config=/etc/nova/rootwrap.conf

# DHCP Bridge Configuration
dhcpbridge_flagfile=/etc/nova/nova.conf
dhcpbridge=/usr/bin/nova-dhcpbridge

# Define availability zones
node_availability_zone=<%= node['nova']['node_availability_zone'] %>

# RPC Driver
rpc_backend=<%= @rpc_backend %>

# Host name for service catalog and topics
<% if node['roles'].grep(/compute_core/) != [] -%>
host=<%= node['nova']['zmq_matchmaker_ring']['scheduler'].first %>
rpc_zmq_host=<%= node['nova']['zmq_matchmaker_ring']['scheduler'].first %>
<% else -%>
host=<%= node['nova']['app_ip'] %>
rpc_zmq_host=<%= node['nova']['app_ip'] %>
<% end -%>

<% if node['openstack_config']['queue']['driver'] == "rabbitmq" or
      node['ceilometer']['agent_enabled'] == true -%>
# RabbitMQ settings
rabbit_hosts=<%= node['nova']['rabbit']['nodes'] %>
rabbit_userid=<%=  node['nova']['rabbit']['user'] %>
rabbit_password=<%=  node['nova']['rabbit']['password'] %>
rabbit_virtual_host=<%=  node['nova']['rabbit']['vhost'] %>
<% end -%>

# Memcached settings
memcached_servers=<%= @memcached_servers %>

<% if node['openstack_config']['queue']['driver'] == "zeromq" -%>
# ZeroMQ settings
rpc_zmq_bind_address=<%= node['nova']['zmq_bind_address'] %>
rpc_zmq_matchmaker="nova.openstack.common.rpc.matchmaker.MatchMakerRing"
<% end -%>


# Service settings
glance_api_servers=<%= node['quagga']['ospfd']['app_ecmp_ip'] %>:<%= node['openstack_config']['glance_port'] %>
osapi_compute_listen=<%= node['nova']['app_ip'] %>
metadata_listen=<%= node['nova']['app_ip'] %>
metadata_host=<%= node['nova']['app_ip'] %>
ec2_listen=<%= node['nova']['app_ip'] %>
sql_connection=<%= OCS.sql_string(node, 'nova') %>

# Hypervisor
libvirt_type=<%= node['nova']['libvirt_type'] %>
compute_driver='libvirt.LibvirtDriver'
allow_same_net_traffic=<%= node['nova']['allow_same_net_traffic'] %>
libvirt_use_virtio_for_bridges=True
libvirt_inject_key=False

# Natter enabled (or not)
enb_enabled=<%= OCS.service_enabled?('natter') %>

# Network manager
<% if node['nova']['network_mode'] == 'nova-network' -%>
public_interface=<%= node['nova']['public_interface'] %>
vlan_interface=<%= node['nova']['vlan_interface'] %>
routing_source_ip=<%= node['nova']['routing_source_ip'] %>
force_dhcp_release=true
  <% if node['nova']['network'] == 'FlatDHCPManager' -%>
flat_injected=<%= node['nova']['flat_injected'] %>
flat_interface=<%= node['nova']['flat_interface'] %>
flat_network_bridge=<%= node['nova']['flat_network_bridge'] %>
fixed_range=<%= node['nova']['fixed_range_v4'] %>
  <% elsif node['nova']['network'] == 'Layer3Manager' -%>
network_manager=l3network.l3manager.L3Manager
l3_lib=nova.network.l3.NullL3
flat_interface=<%= node['nova']['flat_interface'] %>
linuxnet_interface_driver=l3network.l3linuxbridgedriver.L3LinuxBridgeInterfaceDriver
libvirt_vif_driver=l3network.l3vifdriver.LibvirtL3BridgeDriver
  <% else -%>
network_manager=nova.network.manager.<%= node['nova']['network'] %>
  <% end -%>
<% else -%>
network_api_class=nova.network.quantumv2.api.API
#TODO(jpg) use Quantum internal URL
quantum_url="http://<%= node['quagga']['ospfd']['app_ecmp_ip'] %>:<%= node['quantum']['port']%>/network/"
quantum_auth_strategy=keystone
quantum_admin_tenant_name=service
quantum_admin_username=quantum
quantum_admin_password=<%= node['openstack_config']['services']['quantum']['keystone_service_password'] %>
quantum_admin_auth_url="<%= OCS.keystone_internal_endpoint(node) %>"

security_group_api=quantum

service_quantum_metadata_proxy=true
quantum_metadata_proxy_shared_secret=foo
  <% if OCS.service_enabled?('contrail_controller') %>
libvirt_vif_driver=nova_contrail_vif.contrailvif.VRouterVIFDriver
  <% else %>
libvirt_vif_driver=nova.virt.libvirt.vif.LibvirtHybridOVSBridgeDriver
  <% end %>
<% end -%>

# Misc path settings
lock_path=<%= node['nova']['lock_path'] %>
logdir=<%= node['nova']['logdir'] %>
state_path=<%= node['nova']['state_path'] %>
instances_path=<%= node['nova']['instances_path'] %>
ca_path=<%= node['nova']['ca_path'] %>

# Scheduler settings
scheduler_default_filters=AvailabilityZoneFilter,RamFilter,ComputeFilter,CoreFilter,AggregateInstanceExtraSpecsFilter,RetryFilter
ram_allocation_ratio= <%= node['nova']['scheduler']['ram_allocation_ratio'] %>
reserved_host_memory_mb= <%= node['nova']['scheduler']['reserved_host_memory_mb'] %>
cpu_allocation_ratio= <%= node['nova']['scheduler']['cpu_allocation_ratio'] %>
noop_cost_fn_weight=0.0
compute_fill_first_cost_fn_weight=-10
scheduler_max_attempts=<%= node['nova']['scheduler']['max_attempts'] %>

use_ipv6=<%= node['nova']['use_ipv6'] %>

# Quota
quota_instances=<%= node['nova']['quota']['instances'] %>
quota_cores=<%= node['nova']['quota']['cores'] %>
quota_ram=<%= node['nova']['quota']['ram'] %>
quota_floating_ips=<%= node['nova']['quota']['floating_ips'] %>
quota_metadata_items=<%= node['nova']['quota']['metadata_items'] %>
quota_injected_files=<%= node['nova']['quota']['injected_files'] %>
quota_injected_file_content_bytes=<%= node['nova']['quota']['injected_file_content_bytes'] %>
quota_injected_file_path_bytes=<%= node['nova']['quota']['injected_file_path_bytes'] %>
quota_security_groups=<%= node['nova']['quota']['security_groups'] %>
quota_security_group_rules=<%= node['nova']['quota']['security_group_rules'] %>
quota_key_pairs=<%= node['nova']['quota']['key_pairs'] %>

<% if node['ceilometer']['agent_enabled'] == true -%>
# Ceilometer / Notifications
notification_driver=nova.openstack.common.notifier.rpc_notifier
notification_driver=ceilometer.compute.nova_notifier
instance_usage_audit=True
instance_usage_audit_period=hour
notify_on_state_change=vm_and_task_state
<% end -%>

<% if node['nova'].has_key?("blocked_networks") -%>
# Support for L3 Blocked Networks feature
# Multiple blocked network cidrs can be added via metadata
# blocked_networks=172.0.0.0/8,192.168.1.0/24
blocked_networks=<%= node['nova']['blocked_networks'] %>
<% end -%>
<% if node['nova'].has_key?("whitelisted_hosts") -%>
# Support for L3 Whitelisted Hosts
# Multiple services can be whitelisted via metadata
# whitelisted_hosts=172.18.255.253:80,10.33.0.5:443
whitelisted_hosts=<%= node['nova']['whitelisted_hosts'] %>
<% end -%>

# VNC
novncproxy_host=<%= node['nova']['app_ip'] %>
novncproxy_port=<%= node['nova']['novncproxy']['port'] %>
vnc_enabled=True
vncserver_listen=<%= node['nova']['app_ip'] %>
vncserver_proxyclient_address=<%= node['nova']['app_ip'] %>
<% if node['haproxy'].attribute?('https_api_hostname') %>
novncproxy_base_url=https://<%= node['haproxy']['https_api_hostname'] %>:6080/vnc_auto.html
<% else%>
novncproxy_base_url=http://<%= node['quagga']['ospfd']['app_ecmp_ip'] %>:6080/vnc_auto.html
<% end %>

# iptables setting
iptables_top_regex = <%= node['nova']['iptables_top_regex'] %>
iptables_bottom_regex = <%= node['nova']['iptables_bottom_regex'] %>
iptables_drop_action=DROP

[conductor]
use_local=true
